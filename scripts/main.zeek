module CVE_2022_30216_Detection;

export {
	redef enum Notice::Type += {
		ExploitAttempt,
		ExploitSuccess
	};
}


function report_exploit(c: connection, successful: bool, stub: string)
	{
	local status = successful ? "Successful" : "Attempted";
	local exploit_modifier = successful ? "exploited" : "attempted exploit against";

	local resp_h = c$id$resp_h;
	local orig_h = c$id$orig_h;

	local msg = fmt("%s CVE-2022-30216 exploit: %s %s %s",
			status, orig_h, exploit_modifier, resp_h);

	local clean_stub = find_last(gsub(stub, /\x00/, ""), /\\((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\/);

	if ( clean_stub != "" )
		msg += " relaying to " + clean_stub[1:-1];

	local n = successful ? ExploitSuccess : ExploitAttempt;
	NOTICE([$note=n, $conn=c, $msg=msg, $identifier=cat(orig_h, resp_h)]);
	}


event dce_rpc_request_stub(c: connection, fid: count, ctx_id: count,
				opnum: count, stub: string)
	{
	if ( opnum != 74 || ! c?$dce_rpc || ! c$dce_rpc?$endpoint )
		return;

	if ( c$dce_rpc$endpoint != "srvsvc" )
		return;

	report_exploit(c, F, stub);
	}

event dce_rpc_response_stub(c: connection, fid: count, ctx_id: count, opnum: count, stub: string)
	{
	if ( opnum != 74 || ! c?$dce_rpc_backing )
		return;

	local dr_backing = c$dce_rpc_backing;

	for ( backing in dr_backing )
		{
		local b = dr_backing[backing];

		if ( ! b?$info || ! b$info?$endpoint )
			next;

		if ( b$info$endpoint == "srvsvc" )
			{
			report_exploit(c, T, stub);
			return;
			}
		}
	}
